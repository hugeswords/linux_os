一、应用场景
mmap()系统调用使得进程之间通过映射同一个普通文件实现共享内存。普通文件被映射到进程地址空间后，进程可以像访问普通内存一样对文件进行访问，不必再调用read()，write（）等操作。
　　注：实际上，mmap()系统调用并不是完全为了用于共享内存而设计的。它本身提供了不同于一般对普通文件的访问方式，进程可以像读写内存一样对普通文件的操作。而Posix或System V的共享内存IPC则纯粹用于共享目的，当然mmap()实现共享内存也是其主要应用之一。

二、几个函数
void* mmap ( void * addr , size_t len , int prot , int flags , int fd , off_t offset )
　　参数fd为即将映射到进程空间的文件描述字，一般由open()返回；

int munmap(void *start,size_t length);
    函数说明 munmap()用来取消参数start所指的映射内存起始地址，参数length则是欲取消的内存大小。当进程结束或利用exec相关函数来执行其他程序时，映射内存会自动解除，但关闭对应的文件描述符时不会解除映射。

int msync ( void * addr, size_t len, int flags)
进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap()后才执行该操作。可以通过调用msync()函数来实现磁盘文件内容与共享内存区中的内容一致,即同步操作.

三、内存映射的步骤如下
1.使用open系统调用打开文件，并返回文件描述符fd；
2.使用mmap对fd建立映射，返回映射首地址指针start；
3.对映射文件进行读写操作；
4.使用munmap函数关闭内存映射；
5.使用close关闭文件fd；
